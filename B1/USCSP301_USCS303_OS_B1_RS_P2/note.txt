// Name: Ritika Sahu
// Batch:B2
// PRN:2020016400783543
// Date:24th July,2021
// Prac-02:SJF (with no preemption) Algorithm

import java.util.Scanner;

public class P2_SJF_NR
{
// defining variables
int burstTime[];
int arrivalTime[]={0};
String[] processId;
int numberOfProcess;
void getProcessData(Scanner input) {
System.out.print("Enter the number of Process of Scheduling: ");
int inputNumberOfProcess=input.nextInt();
numberOfProcess=inputnumberOfProcess;
burstTime=new int[numberOfProcess];
arrivalTime=new int[numberOfProcess];
processId=new String[numberOfProcess];
String st="P";
for (int i=0;i<numberOfProcess;i++) {
processId[i]=st.concat(Integer.toString(i));
System.out.print("Enter the burst time for process-"+(i)+":");
burstTime[i]=input.nextInt(); }//for loop ends
}//getProcessData function ends
void sortAccordingBurstTime(int[]at,int[]bt,String[] pid) {
boolean swapped;
int temp;
String temp;
for(int i=0;i<numberOfProcess;i++){
swapped=false;
for(int j=0;j<numberOfProcess-i-1;j++){
if(bt[j]>bt[j+1]){
//swapping burst time
temp=bt[j];
bt[j]=bt[j+1];
bt[j+1]=temp;
//swapping arrival time
temp=at[j];
at[j]=at[j+1];
at[j+1]=temp;

//swapping process id
stemp=pid[j];
pid[j]=pid[j+1];
pid[j+1]=stemp;
//enchanced bubble sort swapped=true;
}//if ends
}//inner for(j) ends if (swapped==false){
break;
}
}//outer for(i) ends
}//sortAccordingBurstTime function ends
void shortestJobFirstNPAlgorithm(){
int finishTime[]=new int[numberOfProcess];
int bt[]=burstTime.clone();
int at[]=arrivalTime.clone();
String pid[]=processId.clone();
int waitingTime[]=new int[numberOfProcess];
int turnAroundTime[]=new int[numberOfProcess];
sortAccordingBurstTime(ab,bt,pid);
//calculating waiting & turn-around time for each process 
finishTime[0]=at[0]+bt[0];
turnAroundTime[0]=finishTime[0]-at[0];
waitingTime[0]=turnAroundTime[0]-bt[0];
for (int i=1;i<numberOfProcess;i++){
finishTime[i]=bt[i]+finishTime[i-1];
turnAroundTime[i]=finishTime[i]-at[i];
waitingTime=turnAroundTime[i]-bt[i];
}
float sum=0;
for(int n:waitingTime){
sum+=n;
}
float averageWaitingTime=sum/numberOfProcess;
sum=0;
for (int n:turnAroundTime){
sum+=n;
}
float averageTurnAroundTime=sum/numberOfProcess;
//print on console the order of processes scheduled using
//Shortest Job